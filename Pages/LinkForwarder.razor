@page "/l/{user}/{shortUrl}"
@inject HttpClient Http
@inject NavigationManager NavManager

<p>Short Url: @shortUrl</p>
<p>User: @user</p>
@if (shortlinks == null)
{
    <p>Loading...</p>
}
else
{
    <table>
        <tr>
            <td>Name &emsp;</td>
            <td>Main Url &emsp;</td>
            <td>Short Url &emsp;</td>
        </tr>
        @foreach (var shortlink in shortlinks) 
        {
            if((shortlink.ListOnPage == "true") || (shortlink.ListOnPage=="TRUE"))
            {   
                <tr>
                    <td>@shortlink.Name &emsp;</td>
                    <td>@shortlink.MainUrl &emsp;</td>
                    <td>@shortlink.ShortUrl</td>
                </tr>
            }
        }
    </table>
}
@code 
{
    private Shortlinks[] shortlinks;
    [Parameter]
    public string shortUrl { get; set; }
    [Parameter]
    public string user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            shortlinks = await Http.GetFromJsonAsync<Shortlinks[]>("shortlinks/"+user+"-links.json");
            foreach(var shortlink in shortlinks)
            {
                if(shortUrl == shortlink.ShortUrl)
                {
                    shortUrl = "in list";
                    NavManager.NavigateTo(shortlink.MainUrl);
                }
            }
        }
        catch(Exception userNotFound)
        {
            shortUrl = shortUrl + " is not in list";
        }
    }
    public class Shortlinks
    {
        public string Name { get; set; }
        public string MainUrl { get; set; }
        public string ShortUrl { get; set; }
        public string ListOnPage { get; set; }
    }
}